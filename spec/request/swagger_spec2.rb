# frozen_string_literal: true

require 'rails_helper'
require 'saml/settings_service'
require 'sm/client'
require 'support/sm_client_helpers'
require 'rx/client'
require 'support/rx_client_helpers'
require 'bb/client'
require 'support/bb_client_helpers'
require 'support/pagerduty/services/spec_setup'

require 'committee'

# TODO support spec tests using committee, clean up requires, replace swagger_spec, remove this file from git

# HELPFUL LINK https://www.sitepoint.com/json-validation-by-committee/

RSpec.describe 'API doc validations', type: :request do
  context 'json validation' do
    it 'has valid json' do
      get '/v0/apidocs.json'
      json = response.body
      JSON.parse(json).to_yaml
    end
  end
end

RSpec.describe 'the API documentation', type: :request, order: :defined do
  include AuthenticatedSessionHelper
  include Committee::Test::Methods

  SCHEMA_PATH = "#{Rails.root}/spec/fixtures/apidocs.json".freeze
  # definitions for testing with committee gem
  let(:last_response) { response }
  let(:last_request) { request }
  def committee_options
    return @committee_options if @committee_options
    get '/v0/apidocs.json'
    open(SCHEMA_PATH, 'w') { |f|
      f.puts response.body
    }
    @committee_options = {
      schema: Committee::Drivers::load_from_file(SCHEMA_PATH),
      prefix: "/v0"#,
      # validate_success_only: true
    }
  end

  let(:rubysaml_settings) { build(:rubysaml_settings) }
  let(:mhv_user) { build(:user, :mhv, middle_name: 'Bob') }

  before(:suite) do
    # download schema generated by swagger
    # get '/v0/apidocs.json'
    # open(SCHEMA_PATH, 'w') { |f|
    #   f.puts response.body
    # }
  end

  after(:suite) do
    # delete the json file
  end


  before do
    create(:account, idme_uuid: mhv_user.uuid)
    allow(SAML::SettingsService).to receive(:saml_settings).and_return(rubysaml_settings)
  end

  context 'has valid paths' do
    let(:headers) { { '_headers' => { 'Cookie' => sign_in(mhv_user, nil, true) } } }

    it 'supports fetching maintenance windows' do
      get '/v0/maintenance_windows'
      assert_schema_conform
    end
  end
end
